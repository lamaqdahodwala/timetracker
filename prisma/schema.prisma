// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Row {
  id       Int      @id @default(autoincrement())
  date     DateTime
  column   Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId Int
  value    Int
}

model ScoreRow {
  id     Int      @id @default(autoincrement())
  date   DateTime
  value  Int
  user   User     @relation(fields: [userId], references: [id])
  userId String
}

model Column {
  id             Int      @id @default(autoincrement())
  historicalData Row[]
  today          Int
  name           String
  lastUpdated    DateTime @updatedAt
  type           String   @default("additive")
  factor         Int      @default(1)
  threshold      Int      @default(0)
  stackable      Boolean  @default(false) // stackable refers to whether to keep changing the score if you go above the threshold. 
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  target         Target?  
}

model Target {
  id          Int      @id @default(autoincrement())
  on          Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  targetValue Int
  setOn       DateTime @default(now())
  length      String // day, week, month
  columnId    Int @unique
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  columns Column[]

  pastProductivityScores ScoreRow[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
